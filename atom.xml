<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>开启转向灯的博客</title>
  
  <subtitle>Welcome to my Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="taylor0417.github.io/"/>
  <updated>2018-06-12T04:22:10.000Z</updated>
  <id>taylor0417.github.io/</id>
  
  <author>
    <name>Taylor0417</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http学习笔记</title>
    <link href="taylor0417.github.io/http-md.html"/>
    <id>taylor0417.github.io/http-md.html</id>
    <published>2018-06-12T04:22:10.000Z</published>
    <updated>2018-06-12T04:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP的发展历史"><a href="#HTTP的发展历史" class="headerlink" title="HTTP的发展历史"></a>HTTP的发展历史</h3><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><ol><li>只有一个命令GET</li><li>没有HEADER等描述数据的信息</li><li>服务器发送完毕会关闭TCP连接</li></ol><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><ol><li>增加了很多新命令，比如post</li><li>增加status code和header</li><li>多字符集支持、多部分发送、权限、缓存等</li></ol><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><ol><li>持久连接（性能大幅度提升）</li><li>pipeline（一次可以发送多个请求—串行排队模式）</li><li>增加host和其他一些命令</li></ol><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><ol><li>所有数据以二进制传输</li><li>同一个连接里发送多个请求不再需要按照顺序来（并行无需排队）</li><li>头信息（比如header）压缩以便减少带宽的使用和推送（HTML、CSS、js文件并行推送到客户端）等提高效率的功能</li></ol><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li>和HTTP/1.1类似，只是一个安全版本的HTTP</li></ul><h3 id="HTTP的一些概念"><a href="#HTTP的一些概念" class="headerlink" title="HTTP的一些概念"></a>HTTP的一些概念</h3><ul><li>HTTP是约束<strong>客户端</strong>和<strong>服务端</strong>的一个协议</li><li>HTTP协议中包含如何发出请求和如何进行响应（数据包）</li><li>HTTP不存在连接的概念</li><li>HTTP发出请求的时候会和服务端创建一个TCP连接</li></ul><h3 id="HTTP的三次握手"><a href="#HTTP的三次握手" class="headerlink" title="HTTP的三次握手"></a>HTTP的三次握手</h3><p><img src="./media/3.png" width="400" alt=""></p><blockquote><p>首先客户端向服务端发出请求其中包括SYN=1标志位（创建请求的数据包）和Seq=X.</p><p>服务端收到请求数据包创建TCP连接，并开启一个端口，同时返回SYN=1标志位，ACK=X+1(Seq的值+1)，Seq=Y（服务端的Seq）</p><p>客户端接收后表明服务端已经收到之前发送的请求了并且已经创建好TCP连接了，于是回复ACK=Y+1,Seq=Z</p></blockquote><h4 id="为什么需要三次握手"><a href="#为什么需要三次握手" class="headerlink" title="为什么需要三次握手"></a>为什么需要三次握手</h4><ul><li><p>避免创建无用的TCP连接</p></li><li><p>可以让服务端得知客户端是否已经收到了响应</p></li><li><p>规避由于网络延迟造成的不必要的服务器开销问题</p></li></ul><h3 id="约定内容"><a href="#约定内容" class="headerlink" title="约定内容"></a>约定内容</h3><ul><li>请求/响应报文格式</li><li>请求方法——GET/POST/etc.</li><li>响应状态——200/404/302/304/etc.</li><li>预设的请求/响应头</li></ul><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>每次请求需要包含三个部分，分别是请求行、请求头、请求体</p><ul><li><p>请求行（GET /路径 HTTP/1.1）</p></li><li><p>请求头在请求行之下，格式为键值形式</p></li><li><p>当请求方式为GET时，请求体为空（参数通过在请求行中的请求地址传递），当方式为POST时，请求体为提交的参数</p></li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>每次响应都包含三个部分，分别是状态行、响应头、响应体</p><ul><li><p>状态行（HTTP/1.1 200 OK）</p></li><li><p>响应头和请求头类似</p></li><li><p>服务端想要告诉客户端的一些额外信息，常见的有以下：</p></li></ul><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>Date</td><td>响应时间</td></tr><tr><td>Server</td><td>服务器信息</td></tr><tr><td>Content-Type</td><td>响应体的内容类型</td></tr><tr><td>Content-Length</td><td>响应的内容大小</td></tr><tr><td>Set-Cookie</td><td>让客户端设置一个小票</td></tr></tbody></table><ul><li>在chrome浏览器中响应体在Response中，其内容就是请求的文件的内容（比如请求一个css文件，内容就是这个css文件的全部代码）如果请求的是一张图片，可以在preview中预览图片</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><ul><li>1xx：指示信息 —— 表示请求已接收，继续处理。</li><li>2xx：成功 —— 表示请求已被成功接收、理解、接受。</li><li>3xx：重定向 —— 要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误 —— 请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误 —— 服务器未能实现合法的请求。</li></ul><p>常见状态代码、状态描述的说明如下。</p><ul><li>200 OK：客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和 <code>WWW-Authenticate</code> 报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</li><li>500 Internal Server Error：服务器发生不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li><p>http协议是一个无状态（没脑子）的协议，因为Apache不会记录曾经谁来访问过。举例：登陆后刷新需反复验证登陆信息。</p></li><li><p>Http的会话机制是用来解决这个问题的新技术，其主要构成是Cookie。</p></li><li><p>注：Cookie不是实现登录的唯一方案</p></li><li><p>Cookie的创建和记录都在客户端（浏览器）中完成。</p></li><li><p>Cookie会自动的被当作请求头发送给服务器</p></li><li><p>服务端可以间接的对cookie进行设置</p></li></ol><h3 id="如何创建和读取Cookie"><a href="#如何创建和读取Cookie" class="headerlink" title="如何创建和读取Cookie"></a>如何创建和读取Cookie</h3><ul><li>通过document.cookie进行设置</li><li>Cookie的本质就是一个带有格式的字符串，格式：key=val;key1=val1;…..</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cookie(需多次创建)</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming'</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16'</span>;</div><div class="line"><span class="comment">//读取cookie</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie);</div></pre></td></tr></table></figure><ul><li>读取cookie可以通过浏览器的Application中的Cookies中查看</li></ul><h3 id="Cookie的一些特点"><a href="#Cookie的一些特点" class="headerlink" title="Cookie的一些特点"></a>Cookie的一些特点</h3><ol><li>Cookie是有”寿命”的<ul><li>默认关闭浏览器时清除</li><li>在设置cookie的同时可以对其到期时间进行设置</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming;expires='</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-06-10'</span>);</div></pre></td></tr></table></figure><ol><li><p>Cookie是有访问权限的</p><ul><li>当设置了cookie只能当前路径或者子路径可以访问</li><li>可以对默认访问的路径进行修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming;path=/'</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Cookie有大小限制约为4kb</p></li></ol><h3 id="Cookie的完整设置"><a href="#Cookie的完整设置" class="headerlink" title="Cookie的完整设置"></a>Cookie的完整设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16;path=/;expires'</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-12-01'</span>);</div></pre></td></tr></table></figure><h3 id="Cookie的解析"><a href="#Cookie的解析" class="headerlink" title="Cookie的解析"></a>Cookie的解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原生js解析cookie</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming'</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16'</span>;</div><div class="line"><span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie;</div><div class="line"><span class="keyword">var</span> arr = cookie.split(<span class="string">';'</span>);</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">  <span class="keyword">var</span> tmp = arr[i].split(<span class="string">'='</span>);</div><div class="line">  o[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery插件解析cookie</span></div><div class="line">&lt;script src=<span class="string">'引入jQuery'</span>&gt;&lt;script&gt;</div><div class="line">&lt;script src='引入jQuery-cookie插件'&gt;&lt;script&gt;</div><div class="line">//1设置</div><div class="line">$.cookie('age',16);</div><div class="line">$.cookie('name','xiaoming');</div><div class="line"></div><div class="line">//2完整设置</div><div class="line">$.cookie('gender','female',&#123;</div><div class="line">  path:'/',</div><div class="line">  expires:7</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//读取cookie</div><div class="line">console.log($.cookie('name'));</div><div class="line"></div><div class="line">//删除</div><div class="line">$.removeCookie('name',&#123;</div><div class="line">  path:'/'</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2>]]></content>
    
    <summary type="html">
    
      Http-note
    
    </summary>
    
      <category term="Note" scheme="taylor0417.github.io/categories/Note/"/>
    
    
      <category term="Http" scheme="taylor0417.github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>vue.md</title>
    <link href="taylor0417.github.io/vue-md.html"/>
    <id>taylor0417.github.io/vue-md.html</id>
    <published>2018-06-12T04:02:40.000Z</published>
    <updated>2018-06-12T04:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="一、Vue-js介绍"><a href="#一、Vue-js介绍" class="headerlink" title="一、Vue.js介绍"></a>一、Vue.js介绍</h2><hr><p>Vue.js也称为Vue，读音类似view，错误读音v-u-e，由华人尤雨溪开源并维护。</p><p>Vue有以下特点：</p><ul><li><p>是一个构建用户界面的框架</p></li><li><p>是一个轻量级MVVM（Model-View-ViewModel）框架，和angular、react类似</p></li><li><p>数据驱动+组件化的前端开发（核心思想）</p></li><li><p>通过简单的API实现<strong>响应式的数据绑定</strong>和<strong>组合的视图组件</strong></p></li><li><p>更容易上手、小巧</p></li></ul><h2 id="二、Hello-World"><a href="#二、Hello-World" class="headerlink" title="二、Hello World"></a>二、Hello World</h2><hr><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id="app"&gt;&#123;&#123;content&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var app = new Vue (&#123;</div><div class="line">        el: '#app',</div><div class="line">        data: &#123;</div><div class="line">            content: 'Hello World'</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="三、常用基本指令"><a href="#三、常用基本指令" class="headerlink" title="三、常用基本指令"></a>三、常用基本指令</h2><hr><p>指令用来扩展HTML功能。vue内置了很多指令。</p><h3 id="1、v-model"><a href="#1、v-model" class="headerlink" title="1、v-model"></a>1、v-model</h3><hr><p>它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"main"</span>&gt;</div><div class="line">  &lt;input type="text" v-model="content"&gt;</div><div class="line">  &lt;br&gt; &#123;&#123;content&#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src="./js/vue.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line"> new Vue(&#123;</div><div class="line">     el: '#main',</div><div class="line">     data: &#123;</div><div class="line">         content: ''</div><div class="line">     &#125;</div><div class="line"> &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>在这里，使用<font color="#006600">v-model</font>指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。</p><h3 id="2、v-for"><a href="#2、v-for" class="headerlink" title="2、v-for"></a>2、v-for</h3><hr><p>用于遍历数组、对象等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    //v-for="'内容' in '对象或数组'"</div><div class="line">    &lt;li v-for="item in list"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var app = new Vue(&#123;</div><div class="line">    el: '#app',</div><div class="line">    data: &#123;</div><div class="line">      list: ['第一条内容','第二条内容','第三条内容']</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="3、v-on"><a href="#3、v-on" class="headerlink" title="3、v-on"></a>3、v-on</h3><hr><p>用于绑定事件，用法：v-on:事件=”函数”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//综合案例简单的todolist</span></div><div class="line">&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">      &lt;input type="text" v-model="inputValue"&gt;</div><div class="line">      &lt;button v-on:click="btnClick"&gt;提交&lt;/button&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">          &lt;li v-for="item in list"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">          <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">          <span class="attr">data</span>: &#123;</div><div class="line">              <span class="attr">list</span>: [],</div><div class="line">              <span class="attr">inputValue</span>: <span class="string">''</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">methods</span>: &#123;</div><div class="line">              <span class="attr">btnClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</div><div class="line">                  <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="4、v-show"><a href="#4、v-show" class="headerlink" title="4、v-show"></a>4、v-show</h3><hr><p>用来显示或隐藏元素，<font color="#006600">v-show</font>是通过display实现。当v-show的值为true时显示，为false时隐藏。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;button @click="change"&gt;显示/隐藏&lt;/button&gt;</div><div class="line">    &lt;h1 v-show="flag"&gt;我是隐藏的内容&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var app = new Vue(&#123;</div><div class="line">        el: '#app',</div><div class="line">        data: &#123;</div><div class="line">            flag: true</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            change: function () &#123;</div><div class="line">                this.flag = !this.flag;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue-note
    
    </summary>
    
      <category term="Note" scheme="taylor0417.github.io/categories/Note/"/>
    
    
      <category term="Vue" scheme="taylor0417.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>just-test</title>
    <link href="taylor0417.github.io/just-test.html"/>
    <id>taylor0417.github.io/just-test.html</id>
    <published>2018-06-12T03:05:54.000Z</published>
    <updated>2018-06-12T03:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>水水水水</p>]]></content>
    
    <summary type="html">
    
      描述摘要
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo，从此开始...</title>
    <link href="taylor0417.github.io/hello-world.html"/>
    <id>taylor0417.github.io/hello-world.html</id>
    <published>2017-09-05T07:15:40.000Z</published>
    <updated>2017-10-26T07:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本版本仅适用于Win环境</strong><br>本文关键字： <strong>GoodHexo</strong>，<strong>Hexo绿色版</strong>，<strong>Hexo便携版</strong>，<strong>Hexo配置</strong>，<strong>Hexo</strong>，<strong>U盘携带</strong><br>该文档会根据实际使用情况不定期更新，便携包内可能不同步，最新GoodHexo帮助文档见<a href="http://sobaigu.com/start-with-good-hexo.html" target="_blank" rel="external"><strong>官方网站</strong></a></p></blockquote><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。</p><p>但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。</p><p>所以呢，我们整合了一个 Hexo 便携版，来简化本地环境的部署。</p><p><img src="/images/GoodHexo.png" alt=""></p><h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p>那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成不需要安装的版本。</p><p>本便携版所包含的软件如下：</p><ul><li>Git: 2.7.4</li><li>Nodejs: 6.10.1</li><li>Npm: 4.4.1</li><li>Hexo: 3.2.2</li></ul><p>为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理脚本，下文将详细介绍。</p><h1 id="GoodHexo下载地址"><a href="#GoodHexo下载地址" class="headerlink" title="GoodHexo下载地址"></a>GoodHexo下载地址</h1><p><em>每列提取码与链接对应,如为空表示直接点进去链接不需要提取码,无链接则表示对应软件只需要提取码即可</em></p><table><thead><tr><th>项目</th><th>地址一</th><th>地址二</th><th>地址三</th></tr></thead><tbody><tr><td>链接</td><td><a href="https://pan.baidu.com/s/1hsrKV0w" target="_blank" rel="external">百度网盘</a></td><td><a href="https://www.pipipan.com/dir/535543-25645713-b7a72b/" target="_blank" rel="external">备用网盘</a></td><td>BitTorrent Sync</td></tr><tr><td>提取码</td><td>wp7c</td><td></td><td></td></tr></tbody></table><blockquote><p>如果百度网盘慢，就换备用网盘下，文件大小46.8M<br>或者使用这个：<a href="http://sobaigu.com/software-baidu-pan-downloader.html" target="_blank" rel="external">百度网盘高速下载工具</a></p></blockquote><h1 id="从零开始，一分钟使用-GoodHexo-写作环境"><a href="#从零开始，一分钟使用-GoodHexo-写作环境" class="headerlink" title="从零开始，一分钟使用 GoodHexo 写作环境"></a>从零开始，一分钟使用 GoodHexo 写作环境</h1><p>说了这么多，我们这就开始教你如何在1分钟内，从零开始使用 GoodHexo 写作环境！</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>您订制的GoodHexo包已经包含了Hexo博客所需的所有依赖，其目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">GOODHEXO</div><div class="line">|   1.新建文章.bat  #要新建文章运行此批处理</div><div class="line">|   2.本地测试.bat  #写完文章可以启动本地服务端测试预览效果</div><div class="line">|   3.渲染并部署.bat #确定文章写完了，那么就运行此批处理发布</div><div class="line">|   README.md #本便携包说明文档</div><div class="line">|   启动命令行.bat #给有经验的人用，直达bash界面</div><div class="line">|   清理旧文件后部署.bat  #部署也没报错，但博客就是没更新或者其他异常，那么用这个来部署试试</div><div class="line">|   </div><div class="line">+---hexo    #hexo程序工作目录</div><div class="line">|   |   .gitignore</div><div class="line">|   |   db.json</div><div class="line">|   |   package.json</div><div class="line">|   |   _config.yml  #hexo的主配置文件，定义标题，作者，导航菜单等</div><div class="line">|   |   </div><div class="line">|   +---node_modules  #hexo的依赖环境，不要动</div><div class="line">|   +---scaffolds  #文章模板</div><div class="line">|   +---source  #网站根目录</div><div class="line">|   |   \---_posts  #你所有的文章都存在这个目录底下，通过批处理新建文章会自动建到这个目录下</div><div class="line">|   |   |   hello-world.md  #示例文章源文件，该MarkDown文件会被hexo渲染成HTML页发布</div><div class="line">|   |   </div><div class="line">|   +---themes  #主题存放目录</div><div class="line">|   |   \---landscape #默认主题</div><div class="line">|   |   </div><div class="line">|       </div><div class="line">\---support #便携程序包，包含nodejs和Git，不要动</div></pre></td></tr></table></figure></p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="详细个性化设置"><a href="#详细个性化设置" class="headerlink" title="详细个性化设置"></a>详细个性化设置</h3><p>拿到这个包，一些基础配置和基本的主题设置等院长都已经给你做好了，只需要自行对博客网站进行个性化详细设置即可。</p><p>个性化设置主要有两个地方：</p><ol><li>Hexo目录下的<code>_config.yml</code></li><li>主题目录下的<code>_config.yml</code></li></ol><p>依次打开就能看个大概了，根据自己的需要及主题帮助完成自己要的个性化设置。更深入的个性化基本上需要在主题上做文章，请自行查看主题帮助，或者研究主题源代码即可完成。</p><h3 id="写一篇自己的文章"><a href="#写一篇自己的文章" class="headerlink" title="写一篇自己的文章"></a>写一篇自己的文章</h3><p>设置好后，就可以动手写自己的文章了。</p><h4 id="step1-新建文章"><a href="#step1-新建文章" class="headerlink" title="step1.新建文章"></a>step1.新建文章</h4><p>运行<code>1.新建文章.bat</code>，按提示填写文章名称，建议不要使用中文。</p><p>回车确认后会在<code>hexo</code>目录下的对应目录新建个<code>.md</code>文件，文件名以刚才输入的文章名称命名，如<code>hexo\source\_posts\2017-09-start-with-good-hexo.md</code></p><h4 id="step2-编辑文章MarkDown文件"><a href="#step2-编辑文章MarkDown文件" class="headerlink" title="step2. 编辑文章MarkDown文件"></a>step2. 编辑文章MarkDown文件</h4><p>使用任意文本编辑器打开你刚新建的文章MarkDown源文件，写你想写的内容即可，推荐编辑器首选用Atom或者Typora，<a href="http://sobaigu.com/software-markdown-editor.html" target="_blank" rel="external">MarkDown编辑器推荐这篇文章</a>你可以阅读下。</p><p>如果不依赖MarkDown编辑器，那么你需要掌握基本的MarkDown语法，然后就可以用任意文本编辑器【当然，Windows系统自带的记事本还是不推荐用】，按MarkDown语法写文档了。MarkDown语法可以参考<a href="http://xianbai.me/learn-md/article/about/readme.html" target="_blank" rel="external">这个教程</a>。</p><p><strong>需要额外注意的是</strong>：Hexo对MarkDown文档头有规范，就是在文档开始两个 <code>---</code> 中间的那部分，官方称之为 <code>Front-matter</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;  #文章标题，新建文章的时候填的会自动写到这里，可按需改</div><div class="line">date: &#123;&#123; date &#125;&#125;  #文章创建时间</div><div class="line">categories:  #分类，可以直接跟在这后面，也可以如下一行这样换行后写分类</div><div class="line">- 搞软件  #这是个分类名称</div><div class="line">tags:  #标签</div><div class="line">- 晒酷软  #这是个标签</div><div class="line">toc: true  #是否显示目录，false不显示，true显示，需要主题支持</div><div class="line">top:  #填数字，值越大的文章在首页就越置顶，本包已集成</div><div class="line">comments: true  #是否允许评论，需要主题支持</div><div class="line">keywords: &apos;&apos;    #文章关键词，需要主题支持</div><div class="line">description:  &apos;文章摘要，可以是一大段，用英文引号括起来&apos;  #不填则根据主题设计截取对应字数</div><div class="line">---</div><div class="line">上面部分是规定的头部信息，这行开始就是文章内容了...</div></pre></td></tr></table></figure></p><p>以上参数除了<code>title:</code>都不是必须的，请根据自己的需求填写，如果涉及特殊字符或者空格等，请使用英文的单引号 <code>&#39;&#39;</code> 将你的内容括起来，就如上面的示例一样。</p><p>更多 <code>Front-matter</code> 参数详见官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/front-matter.html</a></p><p>文章参数设置完后，就可以在 <code>---</code> 下一行写自己想写的任何内容了，以下都属于你文章的内容。</p><h4 id="step3-渲染并发布"><a href="#step3-渲染并发布" class="headerlink" title="step3.渲染并发布"></a>step3.渲染并发布</h4><p>文章写好保存，那就运行<code>3.渲染并部署.bat</code>，该批处理会将你的MarkDown源文件套用主题模板渲染成HTML静态页，并把静态页部署到网站空间，最后提示 <code>deploy done：git</code> 就表示已部署完成，要不了几秒，访问你的网站url就能看到效果了。</p><p>以后再写新文章，重复以上步骤即可。</p><p>使用过程中可能会遇到一些问题，请参考我整理的：<a href="http://sobaigu.com/goodhexo-faq.html" target="_blank" rel="external">GoodHexo使用常见问题及解决办法</a></p><h1 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h1><p>如果你喜欢折腾，Hexo进阶部署使用可以参考<a href="http://sobaigu.com/Hexo-git-to-vps.html" target="_blank" rel="external">Hexo博客Git-VPS部署完整记录</a>。</p><p>使用过程中如需帮助，欢迎关注微信公众号，淘宝店，我的博客或者加入我们的交流群。</p><div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-atm.png" width="200" height="260"></div><div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-Taobao.png" width="200" height="260"></div><div style="float:left;border:solid 1px 000;margin:2px;"><img src="http://sobaigu.com/images/QR-260489333.png" width="200" height="260"></div><br><div style="float:none;clear:both;"></div><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><blockquote><ul><li>本文所有权归 <a href="http://sobaigu.com" target="_blank" rel="external">搜百谷</a> 所有；</li><li>本便携版由 <a href="http://sobaigu.com" target="_blank" rel="external">凹凸曼达人</a> 维护并提供技术支持；</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      Hexo是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。
但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。
    
    </summary>
    
      <category term="做网站" scheme="taylor0417.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="taylor0417.github.io/tags/Hexo/"/>
    
      <category term="GoodHexo" scheme="taylor0417.github.io/tags/GoodHexo/"/>
    
      <category term="博客建站" scheme="taylor0417.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
