<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>开启转向灯的博客</title>
  
  <subtitle>Welcome to my Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="taylor0417.github.io/"/>
  <updated>2018-06-12T07:30:00.000Z</updated>
  <id>taylor0417.github.io/</id>
  
  <author>
    <name>Taylor0417</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="taylor0417.github.io/vue-md.html"/>
    <id>taylor0417.github.io/vue-md.html</id>
    <published>2018-06-12T07:30:00.000Z</published>
    <updated>2018-06-12T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="一、Vue-js介绍"><a href="#一、Vue-js介绍" class="headerlink" title="一、Vue.js介绍"></a>一、Vue.js介绍</h2><hr><p>Vue.js也称为Vue，读音类似view，错误读音v-u-e，由华人尤雨溪开源并维护。</p><p>Vue有以下特点： - 是一个构建用户界面的框架 - 是一个轻量级MVVM（Model-View-ViewModel）框架，和angular、react类似 - 数据驱动+组件化的前端开发（核心思想） - 通过简单的API实现<strong>响应式的数据绑定</strong>和<strong>组合的视图组件</strong> - 更容易上手、小巧</p><h2 id="二、Hello-World"><a href="#二、Hello-World" class="headerlink" title="二、Hello World"></a>二、Hello World</h2><hr><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h1 id="app"&gt;&#123;&#123;content&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var app = new Vue (&#123;</div><div class="line">        el: '#app',</div><div class="line">        data: &#123;</div><div class="line">            content: 'Hello World'</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="三、Vue基础使用"><a href="#三、Vue基础使用" class="headerlink" title="三、Vue基础使用"></a>三、Vue基础使用</h2><hr><h3 id="1-Vue实例"><a href="#1-Vue实例" class="headerlink" title="1. Vue实例"></a>1. Vue实例</h3><p>在使用Vue功能前，需要先通过构造函数创建一个Vue实例，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">//选项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="2-Vue实例中的一些基本选项"><a href="#2-Vue实例中的一些基本选项" class="headerlink" title="2. Vue实例中的一些基本选项"></a>2. Vue实例中的一些基本选项</h3><ol><li><p>el选项,该选项用于指定一个页面中已存在的DOM元素来挂载Vue实例，它可以是HTMLElement也可以是CSS选择器，比如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  &lt;div id="app"&gt;&lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">      var app = new Vue(&#123;</div><div class="line">          el: document.getElementById('app')//或者是'#app'</div><div class="line">      &#125;)</div><div class="line">  &lt;/script&gt;</div><div class="line">//挂载成功后可以通过app.$el来访问该元素</div></pre></td></tr></table></figure></li><li><p>data选项，该选项可以声明需要双向绑定的数据，建议将所有会用到的数据绑定预先声明在data选项中，以便后期维护，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="comment">//data中存储的内容可以是多种数据类型</span></div><div class="line">  data: &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">'小明'</span>,</div><div class="line">    <span class="attr">list</span>: [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//我们可以通过app.name 或者app.list[0]去获取和修改数据内容</span></div></pre></td></tr></table></figure></li><li><p>methods选项，该选项用于保存事件的方法（click、keyup、mousemove等）,并且是以函数的形式保存，函数内的this指向的是当前Vue实例本身，所以可以使用this.方法名的形式获取和修改数据，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">          <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">          <span class="attr">data</span>: &#123;</div><div class="line">              <span class="attr">show</span>: <span class="literal">true</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">methods</span>: &#123;</div><div class="line">              <span class="attr">itemClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="built_in">console</span>.log(<span class="string">'clicked'</span>);</div><div class="line">              &#125;,</div><div class="line">              <span class="attr">handleClose</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="keyword">this</span>.show = <span class="literal">true</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></li></ol><h2 id="四、常用基本指令"><a href="#四、常用基本指令" class="headerlink" title="四、常用基本指令"></a>四、常用基本指令</h2><hr><p>指令用来扩展HTML功能。vue内置了很多指令。</p><h3 id="1、v-model"><a href="#1、v-model" class="headerlink" title="1、v-model"></a>1、v-model</h3><hr><p>它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"main"</span>&gt;</div><div class="line">  &lt;input type="text" v-model="content"&gt;</div><div class="line">  &lt;br&gt; &#123;&#123;content&#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src="./js/vue.js"&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line"> new Vue(&#123;</div><div class="line">     el: '#main',</div><div class="line">     data: &#123;</div><div class="line">         content: ''</div><div class="line">     &#125;</div><div class="line"> &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>在这里，使用<font color="#006600">v-model</font>指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。</p><h3 id="2、v-for"><a href="#2、v-for" class="headerlink" title="2、v-for"></a>2、v-for</h3><hr><p>用于遍历数组、对象等。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    //v-for="'内容' in '对象或数组'"</div><div class="line">    &lt;li v-for="item in list"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var app = new Vue(&#123;</div><div class="line">    el: '#app',</div><div class="line">    data: &#123;</div><div class="line">      list: ['第一条内容','第二条内容','第三条内容']</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="3、v-on"><a href="#3、v-on" class="headerlink" title="3、v-on"></a>3、v-on</h3><hr><p>用于绑定事件，用法：v-on:事件=”函数”。可以简写为@</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//综合案例简单的todolist</span></div><div class="line">&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">      &lt;input type="text" v-model="inputValue"&gt;</div><div class="line">      &lt;button v-on:click="btnClick"&gt;提交&lt;/button&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">          &lt;li v-for="item in list"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">          <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">          <span class="attr">data</span>: &#123;</div><div class="line">              <span class="attr">list</span>: [],</div><div class="line">              <span class="attr">inputValue</span>: <span class="string">''</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">methods</span>: &#123;</div><div class="line">              <span class="attr">btnClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.inputValue);</div><div class="line">                  <span class="keyword">this</span>.inputValue = <span class="string">''</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="4、v-show"><a href="#4、v-show" class="headerlink" title="4、v-show"></a>4、v-show</h3><hr><p>用来显示或隐藏元素，<font color="#006600">v-show</font>是通过display实现。当v-show的值为true时显示，为false时隐藏。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">    &lt;button @click="change"&gt;显示/隐藏&lt;/button&gt;</div><div class="line">    &lt;h1 v-show="flag"&gt;我是隐藏的内容&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var app = new Vue(&#123;</div><div class="line">        el: '#app',</div><div class="line">        data: &#123;</div><div class="line">            flag: true</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            change: function () &#123;</div><div class="line">                this.flag = !this.flag;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue-note
    
    </summary>
    
      <category term="Note" scheme="taylor0417.github.io/categories/Note/"/>
    
    
      <category term="Vue" scheme="taylor0417.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>http学习笔记</title>
    <link href="taylor0417.github.io/http-md.html"/>
    <id>taylor0417.github.io/http-md.html</id>
    <published>2018-06-12T04:22:10.000Z</published>
    <updated>2018-06-12T04:22:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP的发展历史"><a href="#HTTP的发展历史" class="headerlink" title="HTTP的发展历史"></a>HTTP的发展历史</h3><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><ol><li>只有一个命令GET</li><li>没有HEADER等描述数据的信息</li><li>服务器发送完毕会关闭TCP连接</li></ol><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><ol><li>增加了很多新命令，比如post</li><li>增加status code和header</li><li>多字符集支持、多部分发送、权限、缓存等</li></ol><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><ol><li>持久连接（性能大幅度提升）</li><li>pipeline（一次可以发送多个请求—串行排队模式）</li><li>增加host和其他一些命令</li></ol><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><ol><li>所有数据以二进制传输</li><li>同一个连接里发送多个请求不再需要按照顺序来（并行无需排队）</li><li>头信息（比如header）压缩以便减少带宽的使用和推送（HTML、CSS、js文件并行推送到客户端）等提高效率的功能</li></ol><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li>和HTTP/1.1类似，只是一个安全版本的HTTP</li></ul><h3 id="HTTP的一些概念"><a href="#HTTP的一些概念" class="headerlink" title="HTTP的一些概念"></a>HTTP的一些概念</h3><ul><li>HTTP是约束<strong>客户端</strong>和<strong>服务端</strong>的一个协议</li><li>HTTP协议中包含如何发出请求和如何进行响应（数据包）</li><li>HTTP不存在连接的概念</li><li>HTTP发出请求的时候会和服务端创建一个TCP连接</li></ul><h3 id="HTTP的三次握手"><a href="#HTTP的三次握手" class="headerlink" title="HTTP的三次握手"></a>HTTP的三次握手</h3><p><img src="./media/3.png" width="400" alt=""></p><blockquote><p>首先客户端向服务端发出请求其中包括SYN=1标志位（创建请求的数据包）和Seq=X.</p><p>服务端收到请求数据包创建TCP连接，并开启一个端口，同时返回SYN=1标志位，ACK=X+1(Seq的值+1)，Seq=Y（服务端的Seq）</p><p>客户端接收后表明服务端已经收到之前发送的请求了并且已经创建好TCP连接了，于是回复ACK=Y+1,Seq=Z</p></blockquote><h4 id="为什么需要三次握手"><a href="#为什么需要三次握手" class="headerlink" title="为什么需要三次握手"></a>为什么需要三次握手</h4><ul><li>避免创建无用的TCP连接</li><li>可以让服务端得知客户端是否已经收到了响应</li><li>规避由于网络延迟造成的不必要的服务器开销问题</li></ul><h3 id="约定内容"><a href="#约定内容" class="headerlink" title="约定内容"></a>约定内容</h3><ul><li>请求/响应报文格式</li><li>请求方法——GET/POST/etc.</li><li>响应状态——200/404/302/304/etc.</li><li>预设的请求/响应头</li></ul><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>每次请求需要包含三个部分，分别是请求行、请求头、请求体</p><ul><li>请求行（GET /路径 HTTP/1.1）</li><li>请求头在请求行之下，格式为键值形式</li><li>当请求方式为GET时，请求体为空（参数通过在请求行中的请求地址传递），当方式为POST时，请求体为提交的参数</li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>每次响应都包含三个部分，分别是状态行、响应头、响应体</p><ul><li>状态行（HTTP/1.1 200 OK）</li><li>响应头和请求头类似</li><li>服务端想要告诉客户端的一些额外信息，常见的有以下：</li></ul><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td>Date</td><td>响应时间</td></tr><tr><td>Server</td><td>服务器信息</td></tr><tr><td>Content-Type</td><td>响应体的内容类型</td></tr><tr><td>Content-Length</td><td>响应的内容大小</td></tr><tr><td>Set-Cookie</td><td>让客户端设置一个小票</td></tr></tbody></table><ul><li>在chrome浏览器中响应体在Response中，其内容就是请求的文件的内容（比如请求一个css文件，内容就是这个css文件的全部代码）如果请求的是一张图片，可以在preview中预览图片</li></ul><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。</p><ul><li>1xx：指示信息 —— 表示请求已接收，继续处理。</li><li>2xx：成功 —— 表示请求已被成功接收、理解、接受。</li><li>3xx：重定向 —— 要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误 —— 请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误 —— 服务器未能实现合法的请求。</li></ul><p>常见状态代码、状态描述的说明如下。</p><ul><li>200 OK：客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和 <code>WWW-Authenticate</code> 报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</li><li>500 Internal Server Error：服务器发生不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li><p>http协议是一个无状态（没脑子）的协议，因为Apache不会记录曾经谁来访问过。举例：登陆后刷新需反复验证登陆信息。</p></li><li><p>Http的会话机制是用来解决这个问题的新技术，其主要构成是Cookie。</p></li><li><p>注：Cookie不是实现登录的唯一方案</p></li><li><p>Cookie的创建和记录都在客户端（浏览器）中完成。</p></li><li><p>Cookie会自动的被当作请求头发送给服务器</p></li><li><p>服务端可以间接的对cookie进行设置</p></li></ol><h3 id="如何创建和读取Cookie"><a href="#如何创建和读取Cookie" class="headerlink" title="如何创建和读取Cookie"></a>如何创建和读取Cookie</h3><ul><li>通过document.cookie进行设置</li><li>Cookie的本质就是一个带有格式的字符串，格式：key=val;key1=val1;…..</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cookie(需多次创建)</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming'</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16'</span>;</div><div class="line"><span class="comment">//读取cookie</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie);</div></pre></td></tr></table></figure><ul><li>读取cookie可以通过浏览器的Application中的Cookies中查看</li></ul><h3 id="Cookie的一些特点"><a href="#Cookie的一些特点" class="headerlink" title="Cookie的一些特点"></a>Cookie的一些特点</h3><ol><li>Cookie是有”寿命”的<ul><li>默认关闭浏览器时清除</li><li>在设置cookie的同时可以对其到期时间进行设置</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming;expires='</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-06-10'</span>);</div></pre></td></tr></table></figure><ol><li><p>Cookie是有访问权限的</p><ul><li>当设置了cookie只能当前路径或者子路径可以访问</li><li>可以对默认访问的路径进行修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming;path=/'</span></div></pre></td></tr></table></figure></li></ul></li><li><p>Cookie有大小限制约为4kb</p></li></ol><h3 id="Cookie的完整设置"><a href="#Cookie的完整设置" class="headerlink" title="Cookie的完整设置"></a>Cookie的完整设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16;path=/;expires'</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-12-01'</span>);</div></pre></td></tr></table></figure><h3 id="Cookie的解析"><a href="#Cookie的解析" class="headerlink" title="Cookie的解析"></a>Cookie的解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原生js解析cookie</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming'</span>;</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'age=16'</span>;</div><div class="line"><span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie;</div><div class="line"><span class="keyword">var</span> arr = cookie.split(<span class="string">';'</span>);</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">  <span class="keyword">var</span> tmp = arr[i].split(<span class="string">'='</span>);</div><div class="line">  o[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery插件解析cookie</span></div><div class="line">&lt;script src=<span class="string">'引入jQuery'</span>&gt;&lt;script&gt;</div><div class="line">&lt;script src='引入jQuery-cookie插件'&gt;&lt;script&gt;</div><div class="line">//1设置</div><div class="line">$.cookie('age',16);</div><div class="line">$.cookie('name','xiaoming');</div><div class="line"></div><div class="line">//2完整设置</div><div class="line">$.cookie('gender','female',&#123;</div><div class="line">  path:'/',</div><div class="line">  expires:7</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//读取cookie</div><div class="line">console.log($.cookie('name'));</div><div class="line"></div><div class="line">//删除</div><div class="line">$.removeCookie('name',&#123;</div><div class="line">  path:'/'</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2>]]></content>
    
    <summary type="html">
    
      Http-note
    
    </summary>
    
      <category term="Note" scheme="taylor0417.github.io/categories/Note/"/>
    
    
      <category term="Http" scheme="taylor0417.github.io/tags/Http/"/>
    
  </entry>
  
</feed>
